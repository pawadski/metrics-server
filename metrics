#!/usr/bin/env python3
import os
import argparse
import inspect
import asyncio
import sys

# disables _created suffix
os.environ['PROMETHEUS_DISABLE_CREATED_SERIES'] = 'True'

# disables multiproc dir, in case it somehow ends up being in environment
try:
    del (os.environ['PROMETHEUS_MULTIPROC_DIR'])
except: # noqa
    pass

import prometheus_client # noqa

# disables various autogenerated metrics
prometheus_client.REGISTRY.unregister(prometheus_client.GC_COLLECTOR)
prometheus_client.REGISTRY.unregister(prometheus_client.PLATFORM_COLLECTOR)
prometheus_client.REGISTRY.unregister(prometheus_client.PROCESS_COLLECTOR)
from exporters import exporter # noqa

# argument parsing
parser = argparse.ArgumentParser(
    prog='Metrics Exporter Wrapper',
    description='Wraps exporters, or something',
    add_help=False
)

parser.add_argument('--exporter', metavar='NAME', help='Run metrics by exporter name', default=None)
parser.add_argument('--pushgateway-address', metavar='HOST:PORT', help='Pushgateway address in host:port format', default=None)
parser.add_argument('--output-filename', metavar='file', help='If provided, will print metrics to this file', default=None)
parser.add_argument('--no-print', help='Do not print metrics to stdout', action='store_true', default=False)
parser.add_argument('--debug', help='Turn on debug mode, will be passed to exporter as a constructor argument', default=False, action='store_true')
parser.add_argument('--help', help='Print help', default=False, action='store_true')

parsed_arguments, exporter_arguments = parser.parse_known_args()

if __name__ == '__main__':
    if parsed_arguments.help and parsed_arguments.exporter is not None:
        exporter_arguments = list(exporter_arguments) + ["-h"]
    elif parsed_arguments.exporter is None:
        parser.print_help()
        raise SystemExit

    try:
        exporter_module = __import__(f"exporters.{parsed_arguments.exporter}.{parsed_arguments.exporter}", fromlist=[None])
    except ModuleNotFoundError:
        try:
            exporter_module = __import__(f"exporters.{parsed_arguments.exporter}", fromlist=[None])
        except ModuleNotFoundError:
            print("Exporter not found.")
            sys.exit(255)

    exporter_class = None

    for property_name in dir(exporter_module):
        ref = getattr(exporter_module, property_name)

        if not inspect.isclass(ref):
            continue

        if issubclass(ref, exporter.Exporter):
            exporter_class = ref
            break

    if exporter_class is None:
        raise Exception("No class inheriting Exporter found in module.")

    # execute the found class
    exporter = exporter_class(prometheus_client, parsed_arguments.debug, *exporter_arguments)

    # handle entrypoint as coroutine
    if inspect.iscoroutinefunction(exporter.gather_metrics):
        asyncio.run(exporter.gather_metrics())
    else:
        exporter.gather_metrics()

    metrics = prometheus_client.generate_latest()
    if parsed_arguments.output_filename is not None:
        with open(parsed_arguments.output_filename, "wb") as handle:
            handle.write(metrics)

    # if we are running in a terminal, output metrics to stdout
    if not parsed_arguments.no_print and sys.stdin and sys.stdin.isatty():
        print(metrics.decode('UTF-8'))

    # optionally also push to pushgateway
    if parsed_arguments.pushgateway_address is not None:
        prometheus_client.push_to_gateway(
            parsed_arguments.pushgateway_address,
            job=exporter.job_name,
            registry=prometheus_client.REGISTRY)
